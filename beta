require('dotenv').config();
const { Client, GatewayIntentBits, WebhookClient, Embed } = require('discord.js');
const threeCommasAPI = require('3commas-api-node');
const { EmbedBuilder } = require('@discordjs/builders');
const client = new Client({ intents: [GatewayIntentBits.Guilds,GatewayIntentBits.GuildMessages,GatewayIntentBits.MessageContent] });
const webhook = new WebhookClient({ 
  id: process.env.WEBHOOK_ID, 
  token: process.env.WEBHOOK_TOKEN
});
const embed = new Embed();
client.on("ready", () => {
  console.log(`Logged in as ${client.user.tag}!`);
});

client.on("message", (message) => {
  console.log(message.content);
});

client.login(process.env.TOKEN);

const api = new threeCommasAPI({
    apiKey: process.env.APIKEYS,
    apiSecret: process.env.SECRET
});
const botShow = async (id) => {
    let data = await api.botShow(id);
    return data;
};
const createBar = (percentage) => {
  const length = 15;
  const char = 'â–ˆ';
  const space = ' ';
  let bar = '';
  const factor = 100;
  const scaledPercentage = percentage * factor;
  if (scaledPercentage >= 0) {
    const fill = Math.round((scaledPercentage / 100) * length);
    bar += space.repeat(length - fill);
    bar += char.repeat(fill);
  } else {
    const fill = Math.round((-scaledPercentage / 100) * length);
    bar += char.repeat(fill);
    bar += space.repeat(length - fill);
  }
  return bar;
};
const createMessage = (data, message) => { // added message as a second argument
  if (!data || typeof data !== 'object') {
    throw new Error('Expected an object.');
  }
  username : message.author.tag // using message parameter
  AvatarURL : message.author.displayAvatarURL({ dynamic : true }) // using message parameter
  embeds : [embed]
  let msg = 'BeyondMatrix BOT\nCurrent Deals\n'; // renamed message to msg
  data.active_deals.forEach((deal, index) => {
    msg += `> ${index + 1}) ${deal.bot_name}\n`;
    msg += `>  Coin: ${deal.pair}\n`;
    msg += `>  Current PnL: $${deal.actual_usd_profit}\n`;
    msg += `>  Current Price: ${deal.current_price}\n`;
    msg += `>  Take Profit Price: ${deal.take_profit_price}\n`;
    msg += `>  Stop Loss Price: ${deal.stop_loss_price}\n`;
    msg += `>  Bought Amount: ${deal.bought_amount}\n`;
    msg += `>  Safety Order Count: ${deal.completed_safety_orders_count}\n`;
    msg += '> PnL\n';
    msg += `> ${deal.pair} ${deal.actual_profit_percentage}%\n`;
    msg += `>          ${createBar(deal.actual_profit_percentage)}\n`;  
  });
        return msg;
};

 

client.on('messageCreate', async (msg) => {
  console.log(msg.content);
  if (msg.author.bot || !msg.content.startsWith('~')) return;
  if (msg.content === '~updates') {
    const data = await botShow(11184190);
    console.log('botShow data:', data);
    if (data) {
      const message = createMessage(data, msg); // passed both data and msg
      webhook.send({ embeds: [embed] }); // pass the embed as an option
      msg.reply(message);
    } else {
      console.error('Error: Invalid or missing data:', data);
      msg.reply('Error: Invalid or missing data.');
    }
  } else {
    msg.reply('Invalid command');
  }
}); 
